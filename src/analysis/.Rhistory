movie <- movie %>% clean_names()
# Fix faulty column names for some datasets
for (dataset_info in datasets_to_modify) {
if (file == dataset_info$filename) {
# Modify the value of a specific column for each row
movie[[dataset_info$column_name]] <- dataset_info$specific_value
}
}
# Drop duplicates
movie <- distinct(movie)
# Make copy to compute positive-negative ratio
movie3 <- movie
# Summarize total tweets per time
movie2 <- movie %>% group_by(date) %>% summarize(totaltweets=sum(n_tweets))
# Drop time from dates
movie2$date <- format(as.Date(movie2$date), "%Y-%m-%d")
# Get Tweet volume per day
movie2 <- movie2 %>% group_by(date) %>% summarize(totaltweets=sum(totaltweets))
# Add column with cumulative tweet count
movie2 <- movie2 %>% mutate(cumtweets = cumsum(totaltweets))
# Add name of movie to each row
twitter_id = tolower(movie$movie_name[1])
movie2['twitter_id'] = twitter_id
# TRY TO GET MOJO DATA
# Find corresponding mojo_id for twitter_id
mojo_id <- crosswalk$mojo_id[which(crosswalk == twitter_id)[1]]
# Test if mojo_id is in 2014 or 2015 data
movie_in_2014 <- mojo_id %in% charac2014$movie_id
movie_in_2015 <- mojo_id %in% charac2015$movie_id
# Get release date for a movie
if(movie_in_2014 == TRUE){
release_date <- charac2014$release_date[which(charac2014$movie_id == mojo_id)]
} else {
release_date <- charac2015$release_date[which(charac2015$movie_id == mojo_id)]
}
# Drop UTC from release date
release_date <- format(release_date, "%Y-%m-%d")
# Add pre-release data in a separate dataset
pre_release <- movie2 %>% filter(date < release_date)
# Compute positive-negative ratio
movie3 <- movie3 %>% filter(vader_classifier != "1")
movie3$date <- format(as.Date(movie3$date), "%Y-%m-%d")
movie4 <- movie3 # make copy to later compute pre-release pos-neg ratio
movie3 <- movie3 %>% filter(date >= release_date)
movie3 <- movie3 %>% group_by(date, vader_classifier, movie_name) %>% summarize(totalday = sum(n_tweets))
movie3 <- movie3 %>% group_by(vader_classifier) %>% mutate(cumtweets = cumsum(totalday))
movie3 <- movie3 %>% group_by(date) %>% mutate(pos_neg_ratio = cumtweets[2]/cumtweets[1])
movie3 <- movie3 %>% group_by(date) %>% mutate(daily_pos_neg_ratio = totalday[2]/totalday[1])
movie3 <- movie3 %>% select(date, pos_neg_ratio, daily_pos_neg_ratio)
movie3 <- movie3 %>% distinct()
movie2 <- movie2 %>% left_join(movie3, by = "date")
# Compute pre-release pos-neg ratio
movie4 <- movie4 %>% filter(date < release_date)
movie4 <- movie4 %>% group_by(date, vader_classifier, movie_name) %>% summarize(totalday = sum(n_tweets))
movie4 <- movie4 %>% group_by(vader_classifier) %>% mutate(cumtweets = cumsum(totalday))
movie4 <- movie4 %>% group_by(vader_classifier) %>% summarize(sumcumtweets = sum(cumtweets))
movie2$pre_pos_neg_ratio <- movie4$sumcumtweets[2]/movie4$sumcumtweets[1]
# Drop pre-release data from dataset
movie2 <- movie2 %>% filter(date >= release_date)
# Add pre-release volume to dataset
movie2$pre_release_volume <- sum(pre_release$totaltweets)
# Add t for release day:
movie2 <- movie2 %>% rownames_to_column("t")
# ADD BOX OFFICE DATA FOR MOVIE FOR YEARS AVAILABLE
release_year <- as.numeric(format(as.Date(release_date), "%Y"))
years <- seq(release_year, 2015)
boxofficedata <- NULL
for (year in years) {
# Construct the filepath
filepath <- paste("../../data/mojo/boxoffice/daily/", year, "/boxOffice-daily-", mojo_id, ".csv", sep = "")
# Check if the file exists
if (file.exists(filepath)) {
# Load the CSV file
data <- read.csv(filepath)
# Merge data with previously loaded data
if (is.null(boxofficedata)) {
boxofficedata <- data
} else {
boxofficedata <- rbind(boxofficedata, data)
}
}
}
if (is.null(boxofficedata)) {
next
}
# ADD BOX OFFICE DATA TO MOVIE2 DATASET
# Change date
boxofficedata$date <- sapply(boxofficedata$date, transform_date)
# Cut movie2 off by last date available in boxofficedata
last_boxoffice <- max(boxofficedata$date)
movie2 <- movie2 %>% filter(movie2$date<=last_boxoffice)
# Merge movie2 and boxofficedata
movie2 <- movie2 %>% left_join(boxofficedata, by = "date")
# Add column with cumulative tweet count
movie2 <- movie2 %>% mutate(cumtweets = cumsum(totaltweets))
# Add a lag tweet column (i.e., all cum tweet counts shifted one time period up, so tweets at t-1 correspond to box office cum at t)
movie2 <- movie2 %>% mutate(lag_cum_tweets = lag(cumtweets))
# Add a lag pos-neg ratio column
movie2 <- movie2 %>% mutate(lag_pos_neg_ratio = lag(pos_neg_ratio))
# Store the dataset in the list
all_datasets[[file]] <- movie2
}
merged_data <- do.call(rbind, all_datasets)
merged_data %>% group_by(twitter_id) %>% count()
View(merged_data)
rownames(merged_data) <- 1:nrow(merged_data)
merged_data$lag_cum_tweets[is.na(merged_data$lag_cum_tweets)] <- 0
merged_data$lag_pos_neg_ratio[is.na(merged_data$lag_pos_neg_ratio)] <- 0
complete <- na.omit(merged_data)
complete <- complete %>% clean_names()
complete %>% group_by(movie_id) %>% count()
# Add all character data to complete dataset
complete <- complete %>% left_join(characcomplete, by = "movie_id")
# Merge star_power with complete
star_power <- read_csv('../../gen/data-preparation/output/star_power.csv')
complete <- complete %>% left_join(star_power, by = "movie_id")
crosswalk <- read_csv('../../data/crosswalk/mojo_meta.csv')
metascores2014 <- read_csv('../../data/metacritic/metaScores/2014-metaScores.csv') %>% select(-title)
metascores2015 <- read_csv('../../data/metacritic/metaScores/2015-metaScores.csv') %>% select(-title)
metascores_extra <- read_csv('../../data/other/metascore_extra.csv')
metascores <- rbind(metascores2014, metascores2015)
metascores <- rename(metascores, metascore = metaScore)
metascores <- rename(metascores, n_reviews = nReviews)
metascores <- metascores %>% left_join(crosswalk, by = c("movieID" = "meta_id")) %>% select(-movieID)
metascores <- rbind(metascores, metascores_extra)
complete <- complete %>% left_join(metascores, by = c("movie_id" = "mojo_id"))
## Add production budgets
# Note: there is no crosswalk dataset available to properly merge these
# Hence, I added the mojo_id for each movie to the production_budgets.csv dataset myself by hand
# If you're trying to run this code yourself, it will probably throw an error because your dataset won't have this column
# Will include this modified CSV in my final generated data I will hand in
production_budgets <- read_csv('../../data/the_numbers/production_budgets.csv')
production_budgets <- production_budgets %>% clean_names()
production_budgets <- production_budgets %>% na.omit() %>% select(production_budget, mojo_id)
complete <- complete %>% left_join(production_budgets, by = c("movie_id" = "mojo_id"))
complete <- complete %>% select(-production_budget.x)
complete <- rename(complete, production_budget = production_budget.y)
# Convert production budget numbers
convert_monetary <- function(money_string) {
# Remove non-numeric characters
cleaned_string <- gsub("[^0-9.]", "", money_string)
# Convert string to numeric
numeric_value <- as.numeric(cleaned_string)
# Check if "million" or "billion" is mentioned, and adjust accordingly
if (grepl("million", tolower(money_string))) {
numeric_value <- numeric_value * 10^6
} else if (grepl("billion", tolower(money_string))) {
numeric_value <- numeric_value * 10^9
} else if (grepl("trillion", tolower(money_string))) {
numeric_value <- numeric_value * 10^12
}
return(numeric_value)
}
complete$production_budget_monetary <- sapply(complete$production_budget, convert_monetary)
sequels <- read_csv('../../data/other/sequels.csv')
complete <- complete %>% left_join(sequels, by = "movie_id")
nationaltv2014 <- read_csv('../../data/nielsen-ads/CSV/movies_nationaltv_2014.csv')
nationaltv2015 <- read_csv('../../data/nielsen-ads/CSV/movies_nationaltv_2015.csv')
nationaltv_total <- rbind(nationaltv2014, nationaltv2015)
# Note: I manually edited some columns in this crosswalk set, because some of the column names did not properly correspond
# If you run this code below without my adjusted file, you will get an error
# Will include this modified CSV in my final generated data I will hand in
crosswalk <- read_csv('../../data/crosswalk/mojo_nielsen.csv') %>% select(-mojo_title)
nationaltv_total <- nationaltv_total %>% clean_names()
nationaltv_total <- nationaltv_total %>% select(ad_date, ad_time, spend, duration, ad_code, brand_desc, tv_daypart_desc)
nationaltv_total <- nationaltv_total %>% distinct()
nationaltv_total$brand_desc <- gsub(" MOTION PICTURE", "", nationaltv_total$brand_desc)
nationaltv_total$brand_desc <- tolower(nationaltv_total$brand_desc)
nationaltv_total <- nationaltv_total %>% group_by(ad_date, brand_desc) %>% summarize(spend_nationaltv = sum(spend)) # compute spend per movie per day
nationaltv_total <- nationaltv_total %>% left_join(crosswalk, by = c("brand_desc" = "nielsen_title"))
nationaltv_total <- nationaltv_total %>% na.omit()
# Merge with complete
complete <- complete %>% left_join(nationaltv_total, by = c("movie_id" = "movie_id", "date" = "ad_date"))
View(complete)
# Merge with complete
complete$date <- as.Date(complete$date)
complete <- complete %>% left_join(nationaltv_total, by = c("movie_id" = "movie_id", "date" = "ad_date"))
# Change NAs to 0
complete$spend_nationaltv[is.na(complete$spend_nationaltv)] <- 0
spottv2014 <- read_csv('../../data/nielsen-ads/CSV/movies_spottv_2014.csv')
spottv2015 <- read_csv('../../data/nielsen-ads/CSV/movies_spottv_2015.csv')
spottv_total <- rbind(spottv2014, spottv2015)
spottv_total <- spottv_total %>% clean_names()
spottv_total <- spottv_total %>% select(ad_date, ad_time, brand_desc, spend)
spottv_total <- spottv_total %>% na.omit()
spottv_total <- spottv_total %>% distinct()
spottv_total$brand_desc <- gsub(" MOTION PICTURE", "", spottv_total$brand_desc)
spottv_total$brand_desc <- tolower(spottv_total$brand_desc)
spottv_total <- spottv_total %>% group_by(ad_date, brand_desc) %>% summarize(spend_spottv = sum(spend)) # compute spend per movie per day
spottv_total <- spottv_total %>% left_join(crosswalk, by = c("brand_desc" = "nielsen_title"))
spottv_total <- spottv_total %>% na.omit()
# Merge with complete
complete <- complete %>% left_join(spottv_total, by = c("movie_id" = "movie_id", "date" = "ad_date"))
complete <- complete %>% select(-brand_desc.x, -brand_desc.y)
# Change NAs to 0
complete$spend_spottv[is.na(complete$spend_spottv)] <- 0
# Compute cumulative ad spend
complete <- complete %>% group_by(movie_id) %>% mutate(cumadspend = cumsum(spend_nationaltv + spend_spottv))
complete <- complete %>% mutate(lag_cumadspend = lag(cumadspend))
complete$lag_cumadspend[is.na(complete$lag_cumadspend)] <- 0
complete$week_number <- strftime(complete$date, format = "%V")
complete <- complete %>% ungroup()
# Add weeks since release
complete <- complete %>% mutate(weeks_since_release = (day_of_release %/% 7) + 1)
# Merge missing metascores
# Made this CSV myself, will include in final data I'll hand in
metascore_missing <- read_csv('../../data/metascore_missing.csv')
complete <- complete %>% left_join(metascore_missing, by = "movie_id", suffix = c("", ".new"))
complete <- complete %>% mutate(metascore = ifelse(is.na(metascore), metascore.new, metascore)) %>% select(-metascore.new)
# Add missing production budget value for strangemagic
complete$production_budget_monetary[complete$movie_id=='strangemagic'] <- 70000000
# Save CSV
write.csv(complete, '../../gen/data-preparation/output/complete.csv')
View(complete)
library(tidyverse)
library(readr)
library(lubridate)
library(stringr)
library(zoo)
library(janitor)
library(car)
library(anytime)
library(fixest)
library(broom)
options(scipen=99999)
complete <- read_csv("../../gen/data-preparation/output/complete.csv")
lmdata <- complete %>% select(t, movie_id, gross_box_office, lag_cum_tweets, lag_pos_neg_ratio, pre_release_volume, pre_pos_neg_ratio, lag_cumadspend, day_of_release, genre, star_power, production_budget_monetary, weekdays, metascore, week_number, day_of_release, star_power, weekend, weeks_since_release, domestic_total_gross)
lmdata$lag_cum_tweets[lmdata$lag_cum_tweets == 0] <- NA
lmdata <- complete %>% select(t, movie_id, gross_box_office, lag_cum_tweets, lag_pos_neg_ratio, pre_release_volume, pre_pos_neg_ratio, lag_cumadspend, day_of_release, genre, star_power, production_budget_monetary, weekdays, metascore, week_number, day_of_release, star_power, weekend, weeks_since_release, domestic_total_gross)
lmdata <- complete %>% select(t, movie_id, gross_box_office, lag_cum_tweets, lag_pos_neg_ratio, pre_release_volume, pre_pos_neg_ratio, lag_cumadspend, day_of_release, genre, star_power, production_budget_monetary, metascore, week_number, day_of_release, star_power, weekend, weeks_since_release, domestic_total_gross)
lmdata <- complete %>% select(t, movie_id, gross_box_office, lag_cum_tweets, lag_pos_neg_ratio, pre_release_volume, pre_pos_neg_ratio, lag_cumadspend, day_of_release, genre, star_power, production_budget_monetary, metascore, week_number, day_of_release, star_power, weeks_since_release, domestic_total_gross)
lmdata$lag_cum_tweets[lmdata$lag_cum_tweets == 0] <- NA
lmdata$lag_pos_neg_ratio[lmdata$lag_pos_neg_ratio == 0] <- NA
lmdata$lag_cumadspend[lmdata$lag_cumadspend == 0] <- NA
# Change scale of some variables for clarity
lmdata$pre_release_volume <- lmdata$pre_release_volume/1000000
lmdata$lag_cumadspend <- lmdata$lag_cumadspend/1000000
lmdata$star_power <- lmdata$star_power/1000000000
lmdata$production_budget_monetary <- lmdata$production_budget_monetary/10000000
lm1 <- lm(log(gross_box_office) ~ log(lag_cum_tweets) + log(lag_pos_neg_ratio), lmdata)
summary(lm1)
vif(lm1)
lm2 <- lm(log(gross_box_office) ~ log(lag_cum_tweets) + log(lag_pos_neg_ratio) + pre_release_volume + pre_pos_neg_ratio + lag_cumadspend + star_power + production_budget_monetary + metascore, lmdata)
summary(lm2)
vif(lm2)
10665-2289
lm3 <- feols(log(gross_box_office) ~ log(lag_cum_tweets) + log(lag_pos_neg_ratio) + pre_release_volume + pre_pos_neg_ratio + lag_cumadspend + star_power + production_budget_monetary + metascore | week_number + weeks_since_release,
cluster = ~ movie_id,
data = lmdata)
summary(lm3)
genre_split_data <- lmdata
# Group genres
genre_split_data$genre[genre_split_data$genre == "Comedy / Drama"] <- "Comedy"
genre_split_data$genre[genre_split_data$genre == "Action"] <- "Action / Adventure"
genre_split_data$genre[genre_split_data$genre == "Action Comedy"] <- "Comedy"
genre_split_data$genre[genre_split_data$genre == "Horror Comedy"] <- "Comedy"
genre_split_data$genre[genre_split_data$genre == "Music Drama"] <- "Drama"
genre_split_data$genre[genre_split_data$genre == "Action Drama"] <- "Drama"
genre_split_data$genre[genre_split_data$genre == "Action Thriller"] <- "Thriller"
genre_split_data$genre[genre_split_data$genre == "Crime Drama"] <- "Drama"
genre_split_data$genre[genre_split_data$genre == "Sports Drama"] <- "Drama"
genre_split_data$genre[genre_split_data$genre == "Action Fantasy"] <- "Action / Adventure"
genre_split_data$genre[genre_split_data$genre == "Adventure"] <- "Action / Adventure"
genre_split_data$genre[genre_split_data$genre == "Family Comedy"] <- "Comedy"
genre_split_data$genre[genre_split_data$genre == "Period Action"] <- "Action / Adventure"
genre_split_data$genre[genre_split_data$genre == "Romantic Comedy"] <- "Comedy"
genre_split_data$genre[genre_split_data$genre == "Western Comedy"] <- "Comedy"
genre_split_data <- genre_split_data %>% filter(genre == "Comedy" | genre == "Drama" | genre == "Action / Adventure" | genre == "Thriller" | genre == "Animation" | genre == "Horror")
comedy <- genre_split_data %>% filter(genre == "Comedy")
drama <- genre_split_data %>% filter(genre == "Drama")
actionadventure <- genre_split_data %>% filter(genre == "Action / Adventure")
thriller <- genre_split_data %>% filter(genre == "Thriller")
animation <- genre_split_data %>% filter(genre == "Animation")
horror <- genre_split_data %>% filter(genre == "Horror")
lm_comedy <- feols(log(gross_box_office) ~ log(lag_cum_tweets) + log(lag_pos_neg_ratio) + pre_release_volume + pre_pos_neg_ratio + lag_cumadspend + star_power + production_budget_monetary + metascore | week_number + weeks_since_release,
cluster = ~ movie_id,
data = comedy)
summary(lm_comedy)
lm_drama <- feols(log(gross_box_office) ~ log(lag_cum_tweets) + log(lag_pos_neg_ratio) + pre_release_volume + pre_pos_neg_ratio + lag_cumadspend + star_power + production_budget_monetary + metascore | week_number + weeks_since_release,
cluster = ~ movie_id,
data = drama)
summary(lm_drama)
lm_actionadventure <- feols(log(gross_box_office) ~ log(lag_cum_tweets) + log(lag_pos_neg_ratio) + pre_release_volume + pre_pos_neg_ratio + lag_cumadspend + star_power + production_budget_monetary + metascore | week_number + weeks_since_release,
cluster = ~ movie_id,
data = actionadventure)
summary(lm_actionadventure)
lm_thriller <- feols(log(gross_box_office) ~ log(lag_cum_tweets) + log(lag_pos_neg_ratio) + pre_release_volume + pre_pos_neg_ratio + lag_cumadspend + star_power + production_budget_monetary + metascore | week_number + weeks_since_release,
cluster = ~ movie_id,
data = thriller)
summary(lm_thriller)
lm_animation <- feols(log(gross_box_office) ~ log(lag_cum_tweets) + log(lag_pos_neg_ratio) + pre_release_volume + pre_pos_neg_ratio + lag_cumadspend + star_power + production_budget_monetary + metascore | week_number + weeks_since_release,
cluster = ~ movie_id,
data = animation)
summary(lm_animation)
lm_horror <- feols(log(gross_box_office) ~ log(lag_cum_tweets) + log(lag_pos_neg_ratio) + pre_release_volume + pre_pos_neg_ratio + lag_cumadspend + star_power + production_budget_monetary + metascore | week_number + weeks_since_release,
cluster = ~ movie_id,
data = horror)
summary(lm_horror)
## FIGURE 5 BAR CHART WITH AVG BOX OFFICE FOR ALL 6 GENRES
temp <- genre_split_data %>% group_by(movie_id, genre, domestic_total_gross) %>% count() %>% group_by(genre) %>% mutate(mean_box_office = mean(domestic_total_gross)) %>% select(genre, mean_box_office) %>% distinct()
figure5 <- ggplot(temp, aes(x = genre, y = mean_box_office/1000000)) +
geom_bar(stat = "identity", color = "black", fill = "orange2") +
labs(x = "Genre", y = "Mean Domestic Box Office (in millions USD)") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
figure5
ggsave("../../gen/analysis/output/figure5.png", figure5)
## Load libraries
library(tidyverse)
library(readr)
library(lubridate)
library(zoo)
library(tokenizers)
library(ggplot2)
library(scales)
## Figure 2: Star Power Distribution
star_power <- read_csv('../../gen/data-preparation/output/star_power.csv')
## In-text citation: Check whether top 3 star power movies also make most box office in the end
complete <- read_csv('../../gen/data-preparation/output/complete.csv')
# Table 4: Descriptive Statistics
lmdata <- complete %>% select(t, movie_id, gross_box_office, lag_cum_tweets, lag_pos_neg_ratio, pre_release_volume, pre_pos_neg_ratio, lag_cumadspend, day_of_release, genre, star_power, production_budget_monetary, weekdays, metascore, week_number, day_of_release, star_power)
# Table 4: Descriptive Statistics
lmdata <- complete %>% select(t, movie_id, gross_box_office, lag_cum_tweets, lag_pos_neg_ratio, pre_release_volume, pre_pos_neg_ratio, lag_cumadspend, day_of_release, genre, star_power, production_budget_monetary, metascore, week_number, day_of_release, star_power)
lmdata <- lmdata %>% rename(production_budget = production_budget_monetary)
options(scipen=999)
summary(lmdata$gross_box_office)
sd(lmdata$gross_box_office)
summary(lmdata$lag_cum_tweets)
sd(lmdata$lag_cum_tweets)
summary(lmdata$lag_pos_neg_ratio)
sd(lmdata$lag_pos_neg_ratio)
summary(lmdata$pre_release_volume)
sd(lmdata$pre_release_volume)
summary(lmdata$pre_pos_neg_ratio)
sd(lmdata$pre_pos_neg_ratio)
summary(lmdata$lag_cumadspend)
sd(lmdata$lag_cumadspend)
temp <- lmdata %>% select(movie_id, star_power) %>% distinct()
summary(temp$star_power)
sd(temp$star_power)
temp <- lmdata %>% select(movie_id, production_budget) %>% distinct()
summary(temp$production_budget)
sd(temp$production_budget, na.rm = TRUE)
temp <- lmdata %>% select(movie_id, metascore) %>% distinct()
summary(temp$metascore)
figuredata <- complete %>% select(box_office, day_of_release, totaltweets, daily_pos_neg_ratio)
meanboxoffice <- figuredata %>% group_by(day_of_release) %>% summarize(mean_box_office = mean(box_office))
meanwomvolume <- figuredata %>% group_by(day_of_release) %>% summarize(mean_wom_volume = mean(totaltweets))
meanwomvalence <- figuredata %>% group_by(day_of_release) %>% summarize(mean_wom_valence = mean(daily_pos_neg_ratio))
figuredata2 <- meanboxoffice %>% left_join(meanwomvolume, by = "day_of_release")
figuredata2 <- figuredata2 %>% left_join(meanwomvalence, by = "day_of_release")
figuredata3 <- figuredata2 %>% filter(day_of_release <= 21)
figuredata3 <- figuredata3 %>% mutate(lag_mean_wom_volume = lag(mean_wom_volume))
figuredata3 <- figuredata3 %>% mutate(lag_mean_wom_valence = lag(mean_wom_valence))
figure3 <- ggplot(figuredata3, aes(x = day_of_release)) +
geom_line(aes(y = lag_mean_wom_volume, color = "Daily lagged average Tweet volume")) +
geom_line(aes(y = mean_box_office/500, color = "Daily average box office")) +
scale_y_continuous(
name = "WOM Volume (Number of Tweets)",
sec.axis = sec_axis(~.*500, name = "Box Office (USD)")
) +
labs(x = "Days in Cinema") +
scale_color_manual(values = c("orange2", "gray30")) +
theme_bw()
figure3
ggsave("../../gen/analysis/output/figure3.png", figure3)
figure4 <- ggplot(figuredata3, aes(x = day_of_release)) +
geom_line(aes(y = lag_mean_wom_valence, color = "Daily lagged average positive-negative ratio")) +
geom_line(aes(y = mean_box_office/500000, color = "Daily average box office")) +
scale_y_continuous(
name = "WOM Valence (Positive-Negative Ratio)",
sec.axis = sec_axis(~.*500000, name = "Box Office (USD)")
) +
labs(x = "Days in Cinema") +
scale_color_manual(values = c("orange2", "gray30")) +
theme_bw()
figure4
ggsave("../../gen/analysis/output/figure4.png", figure4)
rm(list=ls())
rm(list=ls())
## Load libraries
library(tidyverse)
## Figure 2: Star Power Distribution
star_power <- read_csv('../../gen/data-preparation/output/star_power.csv')
figure2 <- ggplot(star_power, aes(x=star_power/1000000)) +
geom_histogram(colour="black", fill="orange2") +
theme_bw() +
labs(x = "Star Power (in millions)", y = "Count")
## In-text citation: Check whether top 3 star power movies also make most box office in the end
complete <- read_csv('../../gen/data-preparation/output/complete.csv')
temp <- complete %>% group_by(movie_id) %>% select(foreign_total_gross, domestic_total_gross) %>% distinct()
# Table 4: Descriptive Statistics
lmdata <- complete %>% select(t, movie_id, gross_box_office, lag_cum_tweets, lag_pos_neg_ratio, pre_release_volume, pre_pos_neg_ratio, lag_cumadspend, day_of_release, genre, star_power, production_budget_monetary, metascore, week_number, day_of_release, star_power)
lmdata <- lmdata %>% rename(production_budget = production_budget_monetary)
options(scipen=999)
summary(lmdata$gross_box_office)
sd(lmdata$gross_box_office)
summary(lmdata$lag_cum_tweets)
sd(lmdata$lag_cum_tweets)
summary(lmdata$lag_pos_neg_ratio)
# FIGURES 3&4 WITH BOTH AVG. GROSS BOX OFFICE & AVG.
figuredata <- complete %>% select(box_office, day_of_release, totaltweets, daily_pos_neg_ratio)
meanboxoffice <- figuredata %>% group_by(day_of_release) %>% summarize(mean_box_office = mean(box_office))
meanwomvolume <- figuredata %>% group_by(day_of_release) %>% summarize(mean_wom_volume = mean(totaltweets))
meanwomvalence <- figuredata %>% group_by(day_of_release) %>% summarize(mean_wom_valence = mean(daily_pos_neg_ratio))
figuredata2 <- meanboxoffice %>% left_join(meanwomvolume, by = "day_of_release")
figuredata2 <- figuredata2 %>% left_join(meanwomvalence, by = "day_of_release")
figuredata3 <- figuredata2 %>% filter(day_of_release <= 21)
figuredata3 <- figuredata3 %>% mutate(lag_mean_wom_volume = lag(mean_wom_volume))
figuredata3 <- figuredata3 %>% mutate(lag_mean_wom_valence = lag(mean_wom_valence))
rm(list=ls())
rm(list=ls())
### Load libraries for data cleaning ###
library(tidyverse)
# Read data
complete <- read_csv("../../gen/data-preparation/output/complete.csv")
lmdata <- complete %>% select(t, movie_id, gross_box_office, lag_cum_tweets, lag_pos_neg_ratio, pre_release_volume, pre_pos_neg_ratio, lag_cumadspend, day_of_release, genre, star_power, production_budget_monetary, metascore, week_number, day_of_release, star_power, weeks_since_release, domestic_total_gross)
lmdata$lag_cum_tweets[lmdata$lag_cum_tweets == 0] <- NA
lmdata$lag_pos_neg_ratio[lmdata$lag_pos_neg_ratio == 0] <- NA
lmdata$lag_cumadspend[lmdata$lag_cumadspend == 0] <- NA
lmdata$pre_release_volume <- lmdata$pre_release_volume/1000000
lmdata$lag_cumadspend <- lmdata$lag_cumadspend/1000000
lmdata$star_power <- lmdata$star_power/1000000000
lmdata$production_budget_monetary <- lmdata$production_budget_monetary/10000000
## RESULTS CHAPTER GRAPHS AND DATA
# REGRESSIONS
# MODEL 1: JUST THE MAIN VARIABLES OF INTEREST
lm1 <- lm(log(gross_box_office) ~ log(lag_cum_tweets) + log(lag_pos_neg_ratio), lmdata)
summary(lm1)
vif(lm1)
?vif
??vif
library(car) # for vif
## RESULTS CHAPTER GRAPHS AND DATA
# REGRESSIONS
# MODEL 1: JUST THE MAIN VARIABLES OF INTEREST
lm1 <- lm(log(gross_box_office) ~ log(lag_cum_tweets) + log(lag_pos_neg_ratio), lmdata)
summary(lm1)
vif(lm1)
# MODEL 2: ADD CONTROL VARIABLES, BUT NO FIXED-EFFECTS
lm2 <- lm(log(gross_box_office) ~ log(lag_cum_tweets) + log(lag_pos_neg_ratio) + pre_release_volume + pre_pos_neg_ratio + lag_cumadspend + star_power + production_budget_monetary + metascore, lmdata)
summary(lm2)
vif(lm2)
# MODEL 3: CLUSTER STANDARD ERRORS
lm3 <- feols(log(gross_box_office) ~ log(lag_cum_tweets) + log(lag_pos_neg_ratio) + pre_release_volume + pre_pos_neg_ratio + lag_cumadspend + star_power + production_budget_monetary + metascore | week_number + weeks_since_release,
cluster = ~ movie_id,
data = lmdata)
??feols
library(fixest) # feols
# MODEL 3: CLUSTER STANDARD ERRORS
lm3 <- feols(log(gross_box_office) ~ log(lag_cum_tweets) + log(lag_pos_neg_ratio) + pre_release_volume + pre_pos_neg_ratio + lag_cumadspend + star_power + production_budget_monetary + metascore | week_number + weeks_since_release,
cluster = ~ movie_id,
data = lmdata)
summary(lm3)
# SPLIT OUT IN GENRES
genre_split_data <- lmdata
# Group genres
genre_split_data$genre[genre_split_data$genre == "Comedy / Drama"] <- "Comedy"
genre_split_data$genre[genre_split_data$genre == "Action"] <- "Action / Adventure"
genre_split_data$genre[genre_split_data$genre == "Action Comedy"] <- "Comedy"
genre_split_data$genre[genre_split_data$genre == "Horror Comedy"] <- "Comedy"
genre_split_data$genre[genre_split_data$genre == "Music Drama"] <- "Drama"
genre_split_data$genre[genre_split_data$genre == "Action Drama"] <- "Drama"
genre_split_data$genre[genre_split_data$genre == "Action Thriller"] <- "Thriller"
genre_split_data$genre[genre_split_data$genre == "Crime Drama"] <- "Drama"
genre_split_data$genre[genre_split_data$genre == "Sports Drama"] <- "Drama"
genre_split_data$genre[genre_split_data$genre == "Action Fantasy"] <- "Action / Adventure"
genre_split_data$genre[genre_split_data$genre == "Adventure"] <- "Action / Adventure"
genre_split_data$genre[genre_split_data$genre == "Family Comedy"] <- "Comedy"
genre_split_data$genre[genre_split_data$genre == "Period Action"] <- "Action / Adventure"
genre_split_data$genre[genre_split_data$genre == "Romantic Comedy"] <- "Comedy"
genre_split_data$genre[genre_split_data$genre == "Western Comedy"] <- "Comedy"
# Get genres
genre_split_data <- genre_split_data %>% filter(genre == "Comedy" | genre == "Drama" | genre == "Action / Adventure" | genre == "Thriller" | genre == "Animation" | genre == "Horror")
comedy <- genre_split_data %>% filter(genre == "Comedy")
drama <- genre_split_data %>% filter(genre == "Drama")
actionadventure <- genre_split_data %>% filter(genre == "Action / Adventure")
thriller <- genre_split_data %>% filter(genre == "Thriller")
animation <- genre_split_data %>% filter(genre == "Animation")
horror <- genre_split_data %>% filter(genre == "Horror")
lm_comedy <- feols(log(gross_box_office) ~ log(lag_cum_tweets) + log(lag_pos_neg_ratio) + pre_release_volume + pre_pos_neg_ratio + lag_cumadspend + star_power + production_budget_monetary + metascore | week_number + weeks_since_release,
cluster = ~ movie_id,
data = comedy)
summary(lm_comedy)
lm_drama <- feols(log(gross_box_office) ~ log(lag_cum_tweets) + log(lag_pos_neg_ratio) + pre_release_volume + pre_pos_neg_ratio + lag_cumadspend + star_power + production_budget_monetary + metascore | week_number + weeks_since_release,
cluster = ~ movie_id,
data = drama)
summary(lm_drama)
lm_actionadventure <- feols(log(gross_box_office) ~ log(lag_cum_tweets) + log(lag_pos_neg_ratio) + pre_release_volume + pre_pos_neg_ratio + lag_cumadspend + star_power + production_budget_monetary + metascore | week_number + weeks_since_release,
cluster = ~ movie_id,
data = actionadventure)
summary(lm_actionadventure)
lm_thriller <- feols(log(gross_box_office) ~ log(lag_cum_tweets) + log(lag_pos_neg_ratio) + pre_release_volume + pre_pos_neg_ratio + lag_cumadspend + star_power + production_budget_monetary + metascore | week_number + weeks_since_release,
cluster = ~ movie_id,
data = thriller)
summary(lm_thriller)
lm_animation <- feols(log(gross_box_office) ~ log(lag_cum_tweets) + log(lag_pos_neg_ratio) + pre_release_volume + pre_pos_neg_ratio + lag_cumadspend + star_power + production_budget_monetary + metascore | week_number + weeks_since_release,
cluster = ~ movie_id,
data = animation)
summary(lm_animation)
lm_horror <- feols(log(gross_box_office) ~ log(lag_cum_tweets) + log(lag_pos_neg_ratio) + pre_release_volume + pre_pos_neg_ratio + lag_cumadspend + star_power + production_budget_monetary + metascore | week_number + weeks_since_release,
cluster = ~ movie_id,
data = horror)
summary(lm_horror)
## FIGURE 5 BAR CHART WITH AVG BOX OFFICE FOR ALL 6 GENRES
temp <- genre_split_data %>% group_by(movie_id, genre, domestic_total_gross) %>% count() %>% group_by(genre) %>% mutate(mean_box_office = mean(domestic_total_gross)) %>% select(genre, mean_box_office) %>% distinct()
figure5 <- ggplot(temp, aes(x = genre, y = mean_box_office/1000000)) +
geom_bar(stat = "identity", color = "black", fill = "orange2") +
labs(x = "Genre", y = "Mean Domestic Box Office (in millions USD)") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
figure5
